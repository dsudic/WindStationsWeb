@inherits LayoutComponentBase
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.SignalR.Client
@using WindStations.Core.DTOs
@inject WindStations.Core.Interfaces.IBatteryService batteryService
@inject WindStations.Core.Interfaces.IMessagePersistenceService messageService
@inject NavigationManager navigation
@implements IAsyncDisposable

<div class="main-container">
    <SfAppBar CssClass="custom-appbar">
        <img src="images/windsock.png" width="30" alt="Wind sock" style="margin: 0px 10px" />
        <div style="font-size:22px; font-weight:600">
            WindStation Omiš
            <i id="@(_isOnline ? "online" : "offline")" class="bi bi-circle-fill" style="margin-left: 10px"></i>
        </div>

        <AppBarSpacer></AppBarSpacer>

        <img src="images/battery.png" width="26" alt="Battery" />
        <div style="margin-right: 5px; font-size: 18px">
            @(_batteryStatus.HasValue ? _batteryStatus : "NaN")%
        </div>
    </SfAppBar>

    <Cards></Cards>

    <div style="padding: 20px 0px">
        @Body
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private uint? _batteryStatus;
    private bool _isOnline = false;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var currentBatteryVoltage = await batteryService.GetBatteryVoltageAsync();
        GetBatteryStatus(currentBatteryVoltage);

        var latestTimestamp = await messageService.GetLatestTimestampAsync();
        GetConnectionStatus(latestTimestamp);

        _hubConnection = new HubConnectionBuilder()
        .WithUrl(navigation.ToAbsoluteUri("/dataUpdates"))
        .Build();

        _hubConnection.On<DateTime, float>("ReceiveLatestStatusData", (timestamp, batteryVoltage) =>
        {
            GetConnectionStatus(timestamp);
            GetBatteryStatus(batteryVoltage);

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private void GetConnectionStatus(DateTime latestTimestamp)
    {
        TimeSpan timeDiff = DateTime.Now - latestTimestamp;

        const byte InactivityPeriod = 4;
        _isOnline = timeDiff.TotalMinutes < InactivityPeriod;
    }

    private void GetBatteryStatus(float? currentBatteryVoltage)
    {
        const float BatteryVoltageMax = 4.2F;

        if (currentBatteryVoltage.HasValue)
        {
            _batteryStatus = (uint)Math.Round(currentBatteryVoltage.Value / BatteryVoltageMax * 100);
        }
        else
        {
            _batteryStatus = null;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
