@inherits LayoutComponentBase
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.SignalR.Client
@using WindStations.Core.DTOs
@inject WindStations.Core.Interfaces.IBatteryService batteryService
@inject WindStations.Core.Interfaces.IMessagePersistenceService messageService
@inject NavigationManager navigation
@implements IAsyncDisposable

<div class="main-container">
    <SfAppBar CssClass="custom-appbar">
        <img src="images/windsock.png" width="30" alt="Wind sock" style="margin: 0px 10px" />
        <div style="font-size:22px; font-weight:600">
            WindStation Omiš
            <i id="@GetConnectionStatus()" class="bi bi-circle-fill" style="margin-left: 10px"></i>
        </div>

        <AppBarSpacer></AppBarSpacer>

        <img src="images/battery.png" width="26" alt="Battery" />
        <div style="margin-right: 5px; font-size: 18px">
            @(GetBatteryStatus())%
        </div>
    </SfAppBar>

    <Cards></Cards>

    <div style="padding: 20px 0px">
        @Body
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private float _currentBatteryVoltage;
    private DateTime _latestTimestamp;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _currentBatteryVoltage = await batteryService.GetBatteryVoltageAsync();
        _latestTimestamp = await messageService.GetLatestTimestampAsync();

        _hubConnection = new HubConnectionBuilder()
        .WithUrl(navigation.ToAbsoluteUri("/dataUpdates"))
        .Build();

        _hubConnection.On<DateTime, float>("ReceiveLatestStatusData", (timestamp, batteryVoltage) =>
        {
            _currentBatteryVoltage = batteryVoltage;
            _latestTimestamp = timestamp;

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private string GetConnectionStatus()
    {
        TimeSpan timeDiff = DateTime.Now - _latestTimestamp;

        const byte InactivityPeriod = 4;
        return (timeDiff.TotalMinutes > InactivityPeriod) ? "offline" : "online";
    }

    private uint GetBatteryStatus()
    {
        const float BatteryVoltageMax = 4.2F;
        return (uint)Math.Round(_currentBatteryVoltage / BatteryVoltageMax * 100);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
