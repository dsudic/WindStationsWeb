@page "/pressure"

@using Microsoft.AspNetCore.SignalR.Client
@using WindStations.Core.DTOs
@inject WindStations.Core.Interfaces.IEnvironmentService environmentService
@inject NavigationManager navigation
@implements IAsyncDisposable

<h3>Pressure</h3>

<div style="height: 450px">
    @if (_pressureData is null)
    {
        <SfSkeleton Width="100%" Height="100%" Effect="ShimmerEffect.Wave"></SfSkeleton>
    }
    else
    {
        <SfChart Background="transparent">
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>

            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"
                               Format="HH:mm:ss"
                               LabelFormat="HH:mm"
                               LabelPlacement="LabelPlacement.OnTicks"
                               EdgeLabelPlacement="EdgeLabelPlacement.Shift"
                               PlotOffset="10">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryXAxis>

            <ChartPrimaryYAxis LabelFormat="{value} hPa" RangePadding="ChartRangePadding.Auto" Minimum="0">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>

            <ChartTooltipSettings Enable="true" Header="${point.x}" Format="${point.y}"></ChartTooltipSettings>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@_pressureData"
                             XName="Timestamp"
                             YName="Value"
                             Fill="url(#pressure-gradient)"
                             Type="ChartSeriesType.Area">
                    <ChartSeriesBorder Width="2" Color="#0024db"></ChartSeriesBorder>
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                            <Template>
                                <div>@Math.Round(Convert.ToDouble(context.PointY), 1)</div>
                            </Template>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>

        <svg style="height: 0">
            <defs>
                <linearGradient id="pressure-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
                    <stop offset="0%" style="stop-color: white; stop-opacity: 0.5" />
                    <stop offset="100%" style="stop-color: #2140dc; stop-opacity: 0.5" />
                </linearGradient>
            </defs>
        </svg>
    }
</div>

@code {
    private List<RecordDTO>? _pressureData;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _pressureData = await environmentService.GetPressureDataAsync();
        // Temorary unil fixing implementation for getting local time zone from browser
        _pressureData?.ForEach(p =>
        {
            p.Timestamp = TimeZoneInfo.ConvertTimeFromUtc(p.Timestamp, TimeZoneInfo.FindSystemTimeZoneById("Europe/Zagreb"));
        });

        _hubConnection = new HubConnectionBuilder()
        .WithUrl(navigation.ToAbsoluteUri("/dataUpdates"))
        .Build();

        _hubConnection.On<RecordDTO>("ReceiveLatestPressureData", pressure =>
        {
            if (_pressureData?.Count >= 15)
            {
                _pressureData.RemoveAt(_pressureData.Count - 1);
            }

            // Temorary unil fixing implementation for getting local time zone from browser
            pressure.Timestamp = TimeZoneInfo.ConvertTimeFromUtc(pressure.Timestamp, TimeZoneInfo.FindSystemTimeZoneById("Europe/Zagreb"));
            _pressureData?.Insert(0, pressure);

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
