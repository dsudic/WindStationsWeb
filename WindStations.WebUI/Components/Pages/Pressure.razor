@page "/pressure"

<h3>Pressure</h3>

<div style="height: 450px">
    @if (pressures == null)
    {
        <SfSkeleton Width="100%" Height="100%" Effect="ShimmerEffect.Wave"></SfSkeleton>
    }
    else
    {
        <SfChart Background="transparent">
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>

            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelPlacement="LabelPlacement.OnTicks" EdgeLabelPlacement="EdgeLabelPlacement.Shift" PlotOffset="10">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryXAxis>

            <ChartPrimaryYAxis LabelFormat="{value} hPa" RangePadding="ChartRangePadding.Auto" Minimum="0">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>

            <ChartTooltipSettings Enable="true" Header="${point.x}" Format="${point.y}"></ChartTooltipSettings>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@pressures" XName="Time" YName="Pressure" Fill="url(#pressure-gradient)" Type="ChartSeriesType.Area">
                    <ChartSeriesBorder Width="2" Color="#0024db"></ChartSeriesBorder>
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                            <Template>
                                <div>@Math.Round(Convert.ToDouble(context.PointY))</div>
                            </Template>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>

        <svg style="height: 0">
            <defs>
                <linearGradient id="pressure-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
                    <stop offset="0%" style="stop-color: white; stop-opacity: 0.5" />
                    <stop offset="100%" style="stop-color: #2140dc; stop-opacity: 0.5" />
                </linearGradient>
            </defs>
        </svg>
    }
</div>

@code {
    private class Environment
    {
        public string Time { get; set; }
        public double Pressure { get; set; }
    }

    private List<Environment> pressures = new List<Environment>
    {
        new Environment { Time = "11h", Pressure = 1013.3 },
        new Environment { Time = "12h", Pressure = 1010.23 },
        new Environment { Time = "13h", Pressure = 1015.5 },
        new Environment { Time = "14h", Pressure = 1008.7 },
        new Environment { Time = "15h", Pressure = 1012.4 },
        new Environment { Time = "16h", Pressure = 1009.6 },
        new Environment { Time = "17h", Pressure = 1009.8 },
        new Environment { Time = "18h", Pressure = 1011.8 },
        new Environment { Time = "19h", Pressure = 1012.6 },
        new Environment { Time = "20h", Pressure = 1010.3 },
        new Environment { Time = "21h", Pressure = 1013.4 },
        new Environment { Time = "22h", Pressure = 1013.2 }
    };
}
