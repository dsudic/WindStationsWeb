@page "/data"
@attribute [StreamRendering]
@using WindStations.Core.Models
@inject WindStations.Core.Interfaces.IMessagePersistenceService messageService

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" data-toggle="tab" @onclick="@(async e => {environment = "Environment"; await GetAnemometer();})">Anemometer</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" @onclick="@(e => environment = "Environment")">Vane</a>
    </li>
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" role="button" aria-expanded="false">@environment</a>
        <ul class="dropdown-menu">
            <li><a class="dropdown-item" @onclick="@(async e => {environment = "Temperature"; await Click();})">Temperature</a></li>
            <li><a class="dropdown-item" @onclick="@(async e =>{environment = "Humidity"; await Click();})">Humidity</a></li>
            <li><a class="dropdown-item" @onclick="@(async e => {environment = "Pressure"; await Click();})">Pressure</a></li>
        </ul>
    </li>
</ul>

<LineChart @ref="lineChart" Width="1000" Class="mb-4" />

@code {
    private string environment = "Environment";
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private List<Anemometer>? anemometers;

    public async Task Click()
    {
        List<WindStations.Core.Models.Environment> env = await messageService.GetEnvironmentAsync();

        switch (environment)
        {
            case "Temperature":
                chartData.Datasets = new List<IChartDataset>{
                    new LineChartDataset
                    {
                        Label = "Temperature",
                        Data = env.Select(env=>(double)env.Temperature).ToList(),
                        BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderWidth = new List<double> { 2 },
                        HoverBorderWidth = new List<double> { 4 },
                        PointBackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        PointRadius = new List<int> { 0 }, // hide points
                        PointHoverRadius = new List<int> { 4 }
                    } };
                break;
            case "Humidity":
                chartData.Datasets = new List<IChartDataset>{
                    new LineChartDataset
                    {
                        Label = "Humidity",
                        Data = env.Select(env=>(double)env.Humidity).ToList(),
                        BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderWidth = new List<double> { 2 },
                        HoverBorderWidth = new List<double> { 4 },
                        PointBackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        PointRadius = new List<int> { 0 }, // hide points
                        PointHoverRadius = new List<int> { 4 }
                    } };
                break;
            case "Pressure":
                chartData.Datasets = new List<IChartDataset>{
                    new LineChartDataset
                    {
                        Label = "Pressure",
                        Data = env.Select(env=>(double)env.Pressure).ToList(),
                        BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderWidth = new List<double> { 2 },
                        HoverBorderWidth = new List<double> { 4 },
                        PointBackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        PointRadius = new List<int> { 0 }, // hide points
                        PointHoverRadius = new List<int> { 4 }
                    } };
                break;
        }

        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }
    public async Task GetAnemometer()
    {
        anemometers = await messageService.GetAnemometerAsync();
        chartData = new ChartData
            {
                Labels = anemometers.Select(a => a.TimeStamp.ToString()).ToList(),
                Datasets = new List<IChartDataset>{
                    new LineChartDataset
                    {
                        Label = "Min speed",
                        Data = anemometers.Select(anemometer=>(double)anemometer.MinSpeed).ToList(),
                        BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        BorderWidth = new List<double> { 2 },
                        HoverBorderWidth = new List<double> { 4 },
                        PointBackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[0].ToColor().ToRgbString() },
                        PointRadius = new List<int> { 0 }, // hide points
                        PointHoverRadius = new List<int> { 4 }
                    },
                    new LineChartDataset
                    {

                        Label = "Avg speed",
                        Data = anemometers.Select(anemometer => (double)anemometer.AvgSpeed).ToList(),
                        BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[1].ToColor().ToRgbString() },
                        BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[1].ToColor().ToRgbString() },
                        BorderWidth = new List<double> { 2 },
                        HoverBorderWidth = new List<double> { 4 },
                        PointBackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[1].ToColor().ToRgbString() },
                        PointRadius = new List<int> { 0 }, // hide points
                        PointHoverRadius = new List<int> { 4 }
                    },
                    new LineChartDataset
                    {
                        Label = "Max speed",
                        Data = anemometers.Select(anemometer=>(double)anemometer.MaxSpeed).ToList(),
                        BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[2].ToColor().ToRgbString() },
                        BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[2].ToColor().ToRgbString() },
                        BorderWidth = new List<double> { 2 },
                        HoverBorderWidth = new List<double> { 4 },
                        PointBackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[2].ToColor().ToRgbString() },
                        PointRadius = new List<int> { 0 }, // hide points
                        PointHoverRadius = new List<int> { 4 }
                    }
                }
            };
        if (lineChartOptions is not null)
        {
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAnemometer();
        lineChartOptions = new() { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
        await lineChart.InitializeAsync(chartData, lineChartOptions);
    }
}
